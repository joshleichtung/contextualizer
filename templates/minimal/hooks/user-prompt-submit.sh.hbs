#!/bin/bash
#
# user-prompt-submit Hook
# Generated by Contextualizer for {{projectName}}
#
# This hook monitors context usage before each prompt submission.
# It provides warnings when context usage approaches limits.
#
# Warning Threshold: {{contextMonitoring.warningThreshold}}%
# Critical Threshold: {{contextMonitoring.criticalThreshold}}%
# Boundary Detection: {{contextMonitoring.boundaryDetection}}
#

set -euo pipefail

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Configuration
WARNING_THRESHOLD={{contextMonitoring.warningThreshold}}
CRITICAL_THRESHOLD={{contextMonitoring.criticalThreshold}}
BOUNDARY_DETECTION="{{contextMonitoring.boundaryDetection}}"

# Get context usage from Claude Desktop
# Note: This is a placeholder - actual implementation depends on Claude Desktop API
get_context_usage() {
    # Placeholder: Return mock value for demonstration
    # In production, this would query Claude Desktop's context API
    echo "50"
}

# Main execution
main() {
    local usage
    usage=$(get_context_usage)

    if [ "$usage" -ge "$CRITICAL_THRESHOLD" ]; then
        echo -e "${RED}[CRITICAL]${NC} Context usage at ${usage}% (threshold: ${CRITICAL_THRESHOLD}%)"
        echo "Consider summarizing or archiving conversation history"

        if [ "$BOUNDARY_DETECTION" = "aggressive" ]; then
            echo "Boundary detection: aggressive - blocking prompt"
            exit 1
        fi
    elif [ "$usage" -ge "$WARNING_THRESHOLD" ]; then
        echo -e "${YELLOW}[WARNING]${NC} Context usage at ${usage}% (threshold: ${WARNING_THRESHOLD}%)"
        echo "Approaching context limit - consider optimization"
    else
        echo -e "${GREEN}[OK]${NC} Context usage at ${usage}%"
    fi

    exit 0
}

main "$@"
