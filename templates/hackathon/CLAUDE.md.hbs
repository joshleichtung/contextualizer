# {{projectName}} - Claude Configuration (Hackathon Mode)

Fast-paced development setup for {{projectName}} hackathon project.

## Project Overview

**Project Name**: {{projectName}}
**Setup Date**: {{setupDate}}
**Preset**: Hackathon (Speed-Optimized)
**Framework**: {{#if framework}}{{framework}}{{#if frameworkVersion}} (v{{frameworkVersion}}){{/if}}{{else}}Not detected{{/if}}

## Hackathon Philosophy

**Priority**: Speed > Perfection

- Move fast and ship features
- Focus on core functionality
- Document decisions, not implementation
- Technical debt is acceptable (document it!)
- Ship early, iterate often

## Context Monitoring

Aggressive context management for rapid iteration:
- Warning Threshold: {{contextMonitoring.warningThreshold}}%
- Critical Threshold: {{contextMonitoring.criticalThreshold}}%
- Boundary Detection: {{contextMonitoring.boundaryDetection}} (Optimized for speed)

## Hooks

### user-prompt-submit Hook

Lightweight context monitoring focused on keeping you moving fast.

**Features**:
- Quick context usage checks
- Minimal overhead
- Non-blocking warnings
- Speed-first approach

## Hackathon Guidelines

### Development Speed

1. **Use Templates and Boilerplates**: Don't reinvent the wheel
2. **Copy-Paste-Modify**: Reuse working code
3. **AI-First Development**: Leverage Claude for rapid implementation
4. **Skip Premature Optimization**: Make it work first
5. **Defer Non-Critical Features**: Focus on MVP

### Quality Shortcuts (Acceptable for Hackathons)

- **Testing**: Focus on critical paths only
- **Error Handling**: Basic validation, extensive error handling can wait
- **Code Comments**: Document "why" not "what"
- **Code Style**: Consistent > perfect
- **Performance**: Good enough > optimized

### Technical Debt Tracking

Keep a running list of technical debt to address post-hackathon:

```markdown
## Technical Debt Log

- [ ] Add comprehensive error handling to API routes
- [ ] Implement proper authentication (currently mock)
- [ ] Add input validation for all forms
- [ ] Optimize database queries
- [ ] Add unit tests for core functionality
```

## Memory Sections

{{#each memorySections}}
### {{this.title}}

{{this.content}}

{{/each}}

## Quick Start Checklist

- [ ] Clone starter template or create new project
- [ ] Install dependencies (`npm install`)
- [ ] Start development server (`npm run dev`)
- [ ] Create core features list
- [ ] Build MVP features first
- [ ] Ship to demo environment
- [ ] Iterate based on feedback

## Demo Preparation

### Pre-Demo Checklist

- [ ] Core features working end-to-end
- [ ] Demo data/accounts created
- [ ] Happy path tested
- [ ] Known issues documented
- [ ] Elevator pitch prepared
- [ ] Demo script practiced

### Demo Script Template

```markdown
# Demo Script for {{projectName}}

**Problem**: [What problem does this solve?]

**Solution**: [High-level solution overview]

**Demo Flow**:
1. [First demo step]
2. [Second demo step]
3. [Third demo step]

**Wow Factor**: [Unique/impressive feature to highlight]

**Tech Stack**: [Key technologies used]

**Next Steps**: [If we had more time...]
```

## Rapid Development Tips

### AI Collaboration

- **Be Specific**: "Create a login form with email and password" vs "make auth"
- **Iterate Quickly**: Small, focused prompts for faster results
- **Copy Working Patterns**: Reference existing code that works
- **Ask for Explanations**: Understand generated code to modify it faster

### Time Management

- **Time-box Features**: If stuck for >30 min, simplify or skip
- **Ship Increments**: Deploy working features immediately
- **Document Blockers**: Track issues to address or defer
- **Regular Demos**: Show progress frequently to get feedback

### Common Pitfalls to Avoid

1. **Over-engineering**: Build only what you'll demo
2. **Perfectionism**: Done > perfect
3. **Scope Creep**: Stick to core features
4. **Integration Hell**: Use proven, compatible technologies
5. **Demo Failures**: Test your demo scenario multiple times

## Post-Hackathon

### Cleanup Checklist

- [ ] Code review and refactoring
- [ ] Add comprehensive tests
- [ ] Implement proper error handling
- [ ] Security audit and fixes
- [ ] Performance optimization
- [ ] Documentation completion
- [ ] Technical debt resolution

---

*Generated by Contextualizer for {{projectName}} - Ship Fast!*
