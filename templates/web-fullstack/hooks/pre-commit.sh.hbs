#!/bin/bash
#
# pre-commit Hook
# Generated by Contextualizer for {{projectName}}
#
# This hook runs quality checks before each commit.
# Strictness: {{#if hooks.preCommit.strictness}}{{hooks.preCommit.strictness}}{{else}}balanced{{/if}}
#

set -euo pipefail

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
STRICTNESS="{{#if hooks.preCommit.strictness}}{{hooks.preCommit.strictness}}{{else}}balanced{{/if}}"
PROJECT_NAME="{{projectName}}"

# Counters
ERRORS=0
WARNINGS=0

# Print section header
print_section() {
    echo ""
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Run a check and handle results
run_check() {
    local check_name=$1
    local check_command=$2
    local fail_on=${3:-errors} # errors, warnings, or never

    echo -n "Running $check_name... "

    if eval "$check_command" > /tmp/check_output 2>&1; then
        echo -e "${GREEN}✓${NC}"
        return 0
    else
        local exit_code=$?

        if grep -qi "warning" /tmp/check_output; then
            echo -e "${YELLOW}⚠${NC}"
            WARNINGS=$((WARNINGS + 1))

            if [ "$fail_on" = "warnings" ]; then
                cat /tmp/check_output
                return 1
            fi
        else
            echo -e "${RED}✗${NC}"
            ERRORS=$((ERRORS + 1))

            if [ "$fail_on" != "never" ]; then
                cat /tmp/check_output
                return 1
            fi
        fi

        return 0
    fi
}

# Main execution
main() {
    echo "=== Pre-Commit Checks for $PROJECT_NAME ==="
    echo "Strictness: $STRICTNESS"

{{#if hooks.preCommit.checks}}
{{#each hooks.preCommit.checks}}
    print_section "{{this.name}}"

    # Determine fail behavior based on strictness and check config
    FAIL_ON="{{this.failOn}}"

    if [ "$STRICTNESS" = "strict" ] && [ "$FAIL_ON" = "never" ]; then
        FAIL_ON="warnings"
    elif [ "$STRICTNESS" = "relaxed" ] && [ "$FAIL_ON" = "warnings" ]; then
        FAIL_ON="errors"
    fi

    # Run the check
    # Note: Actual commands would be determined by the check name
    case "{{this.name}}" in
        "lint")
            if [ -f "package.json" ] && grep -q "\"lint\"" package.json; then
                run_check "{{this.name}}" "npm run lint" "$FAIL_ON" || true
            else
                echo "Skipping - no lint script found"
            fi
            ;;
        "typecheck")
            if [ -f "tsconfig.json" ]; then
                run_check "{{this.name}}" "npx tsc --noEmit" "$FAIL_ON" || true
            else
                echo "Skipping - no tsconfig.json found"
            fi
            ;;
        "test")
            if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
                run_check "{{this.name}}" "npm test" "$FAIL_ON" || true
            else
                echo "Skipping - no test script found"
            fi
            ;;
        *)
            echo "Unknown check: {{this.name}}"
            ;;
    esac

{{/each}}
{{else}}
    print_section "Linting"
    if [ -f "package.json" ] && grep -q "\"lint\"" package.json; then
        run_check "lint" "npm run lint" "errors" || true
    else
        echo "Skipping - no lint script found"
    fi

    print_section "Type Checking"
    if [ -f "tsconfig.json" ]; then
        run_check "typecheck" "npx tsc --noEmit" "errors" || true
    else
        echo "Skipping - no tsconfig.json found"
    fi
{{/if}}

    # Summary
    print_section "Summary"
    echo "Errors: $ERRORS"
    echo "Warnings: $WARNINGS"

    if [ $ERRORS -gt 0 ]; then
        echo -e "${RED}Pre-commit checks failed${NC}"
        exit 1
    fi

    echo -e "${GREEN}All checks passed${NC}"
    exit 0
}

main "$@"
